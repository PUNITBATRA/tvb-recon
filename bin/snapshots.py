import os
import numpy
import sys


def read_transformation_matrix(file_name):
    """
    Read matrix generated by mri_info
    """
    file_ref = open(file_name, 'r')
    matrix = [map(float, line.split()) for line in file_ref]
    file_ref.close()
    return matrix


def read_cc_point(file_path, line_flag):
    """
    Read vector values from ponscc.cut.log file generated by FreeSurfer
    """
    cc_point = []
    file_ref = open(os.path.expandvars(file_path), 'r')
    for line in file_ref:
        if line.startswith(line_flag):
            line = line.replace(line_flag, "").strip()
            cc_point = map(float, line.split())
            break
    cc_point.append(1)
    file_ref.close()
    return cc_point


def write_screenshot_command(file_path, shot_name, projection, ras_position):
    """
    Open slices.txt file and write the current screen-shot instruction: target_file_name and position
    """
    count_number = int(os.environ['SNAPSHOT_NUMBER'])
    file_ref = open(file_path, 'wb')
    png_path = os.environ['FIGS'] + "/" + shot_name + str(count_number) + projection + ".png"
    file_ref.write("-ras %s -ss %s" % (ras_position, png_path))
    file_ref.write(" -quit")
    file_ref.close()
    return


def write_snapshot_camera_positions(file_path, shot_name, projection):
    """

    """
    count_number = int(os.environ['SNAPSHOT_NUMBER'])
    file_ref = open(file_path, 'wb')
    png_path = os.environ['FIGS'] + "/" + shot_name + str(count_number) + projection + "1" + ".png"
    file_ref.write("-cam Azimuth 0 Elevation 0 -ss %s\n" % png_path)
    png_path = os.environ['FIGS'] + "/" + shot_name + str(count_number) + projection + "2" + ".png"
    file_ref.write("-cam Azimuth 90 Elevation 0 -ss %s\n" % png_path)
    png_path = os.environ['FIGS'] + "/" + shot_name + str(count_number) + projection + "3" + ".png"
    file_ref.write("-cam Azimuth 180 Elevation 0 -ss %s\n" % png_path)
    png_path = os.environ['FIGS'] + "/" + shot_name + str(count_number) + projection + "4" + ".png"
    file_ref.write("-cam Azimuth 270 Elevation 0 -ss %s\n" % png_path)
    png_path = os.environ['FIGS'] + "/" + shot_name + str(count_number) + projection + "5" + ".png"
    file_ref.write("-cam Azimuth 0 Elevation 90 -ss %s\n" % png_path)
    png_path = os.environ['FIGS'] + "/" + shot_name + str(count_number) + projection + "6" + ".png"
    file_ref.write("-cam Azimuth 0 Elevation 180 -ss %s\n" % png_path)
    file_ref.write(" -quit")
    file_ref.close()
    return


#TODO images are moved if opened with -ras option and maybe they should be re-centered.
#TODO calls to this file should be reviewed and avoid computing RAS vector every time a call is made.

target_screenshot_name = "snapshot"
target_file = "slices.txt"
cameraPositionsFileName = "cameraPositions.txt"
in_point_file = "$SUBJ_DIR/scripts/ponscc.cut.log"
point_line_flag = "CC-CRS"
in_matrix_file = 'matrix.txt'

projection = sys.argv[1]

if projection == 'surface_annotation':
    write_snapshot_camera_positions(cameraPositionsFileName, target_screenshot_name, projection)
    print "It was written ", cameraPositionsFileName
else:
    matrix = read_transformation_matrix(in_matrix_file)
    print "Read idx2rsa matrix:", matrix

    vector = read_cc_point(in_point_file, point_line_flag)
    print "Read vector:", vector

    a = numpy.array(matrix)
    b = numpy.array(vector)
    ras_vector = a.dot(b)
    print "Computed RAS vector:", ras_vector

    ras_string = ' '.join(map(str, ras_vector[:-1]))
    write_screenshot_command(target_file, target_screenshot_name, projection, ras_string)
    print "It was written ", target_file
